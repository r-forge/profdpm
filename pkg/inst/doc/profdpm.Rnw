\documentclass[article]{jss}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% declarations for jss.cls %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% almost as usual
\author{Matthew S. Shotwell\\Medical University of South Carolina \And 
        Elizabeth H. Slate\\Medical University of South Carolina}
\title{\pkg{profdpm}: An \proglang{R} package for MAP Estimation in a Class of Product Partition Models}

%% for pretty printing and a nice hypersummary also set:
\Plainauthor{Matthew S. Shotwell, Elizabeth H. Slate} %% comma-separated
\Plaintitle{profdpm: An R package for MAP Estimation in a Class of Product Partition Models} %% without formatting
%\Shorttitle{MAP Estimation in a Class of Product Partition Models} %% a short title (if necessary)

%% an abstract and keywords
\Abstract{
  The abstract of the article.
}
\Keywords{keywords, comma-separated, not capitalized, \proglang{Java}}
\Plainkeywords{keywords, comma-separated, not capitalized, Java} %% without formatting
%% at least one keyword must be supplied

%% publication information
%% NOTE: Typically, this can be left commented and will be filled out by the technical editor
%% \Volume{13}
%% \Issue{9}
%% \Month{September}
%% \Year{2004}
%% \Submitdate{2004-09-29}
%% \Acceptdate{2004-09-29}

%% The address of (at least) one author should be given
%% in the following format:
\Address{
  Matthew S. Shotwell\\
  Division of Biostatistics and Epidemiology\\
  Medical University of South Carolina\\
  135 Canon St. Charleston, SC, USA\\
  E-mail: \email{shotwelm@musc.edu}\\
  URL: \url{http://biostatmatt.com}
}
%% It is also possible to add a telephone and fax number
%% before the e-mail in the following format:
%% Telephone: +43/1/31336-5053
%% Fax: +43/1/31336-734

%% for those who use Sweave please include the following line (with % symbols):
%% need no \usepackage{Sweave.sty}

%% end of declarations %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\usepackage{amsbsy}
\newcommand{\bz}{\boldsymbol{z}}
\newcommand{\bu}{\boldsymbol{u}}
\newcommand{\btheta}{\boldsymbol{\theta}}
\newcommand{\bmu}{\boldsymbol{\mu}}
\newcommand{\bphi}{\boldsymbol{\phi}}
\newcommand{\bPhi}{\boldsymbol{\Phi}}
\newcommand{\bbeta}{\boldsymbol{\beta}}
\newcommand{\bgamma}{\boldsymbol{\gamma}}
\newcommand{\bXp}{\boldsymbol{X}^{\prime}}
\newcommand{\bx}{\boldsymbol{x}}
\newcommand{\bX}{\boldsymbol{X}}
\newcommand{\bI}{\boldsymbol{I}}
\newcommand{\byp}{\boldsymbol{y}^{\prime}}
\newcommand{\by}{\boldsymbol{y}}
\newcommand{\bv}{\boldsymbol{v}}
\newcommand{\bm}{\boldsymbol{m}}
\newcommand{\bS}{\boldsymbol{S}}

\begin{document}

\section[Intro]{Introduction}
\pkg{profdpm} is an extension package for the \proglang{R} language and environment for statistical computing \citep{R2010}. This package facilitates profile inference (inference at the posterior mode) in a class of product partition models (PPM). The class of PPMs considered herein was motivated, and has as a special case, a PPM formulation of the Dirichlet process mixture. The \pkg{profdpm} package consists of two model-fitting functions, \code{profBinary} and \code{profLinear}, and one function \code{pci} that computes several metrics of agreement between two partitions.

The remainder of this article proceeds as follows: the relevant theory of product partition models is discussed in section \ref{PPMs}, \proglang{R} functions and the underlying \proglang{C} methods are outlined in section \ref{Code}, and examples are presented in section \ref{Examples}.

\section[PPMs]{Product Partition Models} \label{PPMs}
Consider the following hierarchical Bayesian model for a collection of possibly multivariate observations $\by = \{y_1, \ldots, y_n\}$:
\begin{eqnarray}
y_i | z_i = k, \phi_k & \sim & f(y_i|\phi_k) \nonumber \\
\phi_k & \sim & \pi_{\phi}(\phi_k) \nonumber \\
\bz & \sim & \pi_{\bz}(\bz) \propto \prod_{k=1}^r c_k(\bz), \nonumber
\end{eqnarray}
where and the $\bz = \{z_1, \ldots, z_n\}$ is a collection of cluster membership variables such that $z_i = k$ indicates observations $i$ is a member of cluster $k$. The collection $\bz$ represents a partition of $\by$ into $r$ clusters, identified by the $r$ unique values among $\bz$. The values of $\bz$ are not important, as long as they are distinct. For simplicity, the positive integers are used to enumerate the distinct values. The function $f$ is a density indexed by parameter $\phi_k$ for $k = 1,\ldots,r$ independently distributed according to prior density $\pi_{\phi}$, and $\pi{\bz}$ is a prior mass function proportional to a product of {\it cohesion} functions $c_k$. The cohesion functions are used to encode prior belief about a partition. The Dirichlet process mixture has a PPM representation when $c_k(\bz) = \alpha\Gamma(n_k)$, where $\alpha$ is a scalar `precision' parameter, $\Gamma$ is the gamma function, and $n_k$ represents the number of observations identified by the $k^{th}$ cluster. Alternative cohesions yield other well-known processe mixtures \citep[see][for a partial listing]{LauGreen2007}. The \pkg{profdpm} extends the Dirichlet process mixture cohesion to include a scalar `balance' parameter $\lambda$, such that $c_k(\bz) = \alpha\Gamma(n_k)^{\lambda}$. The value of $\lambda$ affects the balance of partition cluster sizes $\{n_1, \ldots, n_r\}$. The posterior distribution over the cluster partition is proportional to the product.
\begin{eqnarray}
p(\bz|\by) \propto \prod_{k=1}^r c_k(\bz) \int L(\phi_k|\by) \pi_{\phi}(\phi_k) d\phi_k , \nonumber
\end{eqnarray}
where $L(\phi_k|\by) = \prod_{i=1}^n f(y_i|\phi_k)^{I(z_i=k)}$ is the cluster-specific likelihood. Hence, the product partition model is conjugate in the sense that both prior and posterior may be written as a product of cluster-specific terms. The product partition model is generally attributed to \citet{Hartigan1990} and \citet{BarryHartigan1992}.

When the PPM is used for clustering or partitioning the collection $\by$, it is common to compute a maximum {\it a posteriori} (MAP) estimate of $\bz$. However, the principal difficulty with partition models is the size of the partition space (see the Bell number). Hence, computing the MAP estimate using enumerative methods is not practical. 

The \pkg{profdpm} package currently utilizes three methods to approximate the MAP estimate in an iterative fashion. The first method is the agglomerative method of \citet{Ward1963}, later used by \citet{Heard2005} in the context of Dirichlet process mixtures. The agglomerative method is (usually) the fastest of the three implemented methods, but does not yield arbitrarily precise approximations to the MAP estimate.

The second method is the Polya urn Gibbs sampler of \citet{MacEachern1994}, \citet{BushMacEachern1996}, and \citet{MacEachernMuller1998}. The Gibbs sampler sequentially samples from the full conditional distributions having mass functions of the form $p(z_i|\bz_{-i},\by)$, where $\bz_{-i}$ is the collection of cluster membership variables with the exception of $z_i$. The Gibbs method produces a consistent sequence of MAP estimates by selecting the sample MAP estimate following each iteration. However, the Polya urn Gibbs sampler is prone to poor mixing in the partition space.

The last method is an iterative stochastic search utilizing `explode' and `merge' operations on the clusters of a partition. This method is motivated by the split-merge Metropolis Hastings algorithms of \citet{GreenRichardson2001}, and \citet{JainNeal2004, JainNeal2007}. The explode-merge method utilizes a Markov chain to approximate the MAP estimate, but does not sample from the posterior distribution over the cluster partition. Hence, the explode-merge method avoids the complexity and computational expense of ensuring the chain is ergodic. Additional details of the explode merge method are pending publication elsewhere. However, a technical report is available on request.

Profile inference about the parameter $\phi_k$ is conducted conditional on an estimate of the cluster partition. In product partition models, conditional on the partition estimate, $\{\phi_1, \ldots, \phi_r\}$ are independent {\it a posteriori}, and distributed according to 
\begin{displaymath}
p(\phi_k | \by, \hat{\bz}) = \int L(\phi_k|\by) \pi_{\phi}(\phi_k) d\phi_k.
\end{displaymath}
Product partition models are often selected to be conjugate in $\phi_k$, giving this integral a closed form. The PPMs used in the \pkg{profdpm} package are two such models.

\section[Code]{Programming Strategy} \label{Code}

The \pkg{profdpm} package computes a MAP estimate for two types of PPMs, corresponding to the \code{profLinear} and \code{profBinary} functions. Both functions accept data and model fitting arguments, and return an estimate of the cluster partition and other information necessary for profile inference. 

\subsection[R Code]{R Code}

The \code{profLinear} function fits a product partition of conjugate normal linear models:
\begin{eqnarray}
y_i | \bx_i, z_i = k, \bmu_k, \tau_k & \sim & N(\bx^{\prime}\bmu_k, \tau_k) \nonumber \\
\bmu_k, \tau_k & \sim & N_qG(\bm_0, s_0I_q, a_0/2, 2/b_0) \nonumber \\
\bz & \sim & \pi_{\bz}(\bz) \propto \prod_{k=1}^r \alpha \Gamma(n_k)^{\lambda},
\end{eqnarray}
where $y_i$ is a continuous scalar observation, $\bx_i$ is a covariate vector, $N$ represents the normal distribution with mean $\bx^{\prime}\bmu_k$ and precision $\tau_k$, and $N_qG$ represents the $q$-variate normal-gamma distribution with mean $\bm_0$, precision matrix $\tau s_0I_q$, shape $a_0/2$, and scale $2/b_0$. The prior parameters of the $\bm_0$, $s_0$, $a_0$, $b_0$, $\alpha$, and $\lambda$ may be specified as arguments to the \code{profLinear} function. Conditional on an estimated cluster partition, the pairs $\{(\bmu_1, \tau_1), \ldots, (\bmu_r, \tau_r)\}$ are independent {\it a posteriori} and distributed according to the $q$-variate normal gamma distribution with mean $\bm_k$, precision matrix $\tau\bS_k$, shape $a_k/2$, and scale $2/b_k$. In addition to the estimated partition, the posterior statistics $\bm_k$, $\bS_k$, $a_k$, and $b_k$ are returned by \code{profLinear} for each cluster.

The \code{profBinary} function fits a product partition of conjugate binary models:
\begin{eqnarray}
y_{ij} | z_i = k, \phi_{kj} & \sim & B(\phi_{kj}) \nonumber \\
\phi_{kj} & \sim & b(a_0, b_0) \nonumber \\
\bz & \sim & \pi_{\bz}(\bz) \propto \prod_{k=1}^r \alpha \Gamma(n_k)^{\lambda},
\end{eqnarray}
where $y_{ij}$ for $j = 1,\ldots,q$ is the $j^{th}$ binary observation for a subject $i$, $B$ represents the Bernoulli distribution with probability $\phi_{kj}$, and $b$ represents the beta distribution with shape parameters $a_0$ and $b_0$. Conditional on an estimated partition, $\phi_{kj}$ is independently beta distributed {\it a posteriori} with shape parameters $a_{kj}$ and $b_{kj}$. The \code{profBinary} function returns the estimated cluster partition as well as the posterior statistics $a_{kj}$ and $b_{kj}$.

\subsection[C Code]{C Code}
Each of the three methods used to compute a MAP estimate of the PPM partition (see section \ref{PPMs}) utilizes a Markov-like process. That is, a partition state is initialized, and then updated sequentially, where the updated state depends on the previous state. Each of the MAP estimation methods may be broken into a small number of simple operations on the partition state, for example, reassigning a single observation from one cluster to another in the partition, or computing the log posterior mass at the given partition state. Hence, the methods for MAP estimation are generically applicable to all product partition models, provided these operations are available. The task of applying the methods generically involves writing functions that perform these simple operations for each supported PPM type ({\it e.g.} for product partitions of linear or binary models).

Each supported PPM has an associated \proglang{C} structure containing data arrays, variables for model fitting parameters, and pointers to functions that perform the simple operations necessary for MAP estimation. These structures hold the partition state, and their references are passed to and from the MAP estimation methods. Additional PPMs may be supported by defining new structures and the associated functions to perform simple operations on the partition. Readers interested in extending the \pkg{profdpm} package to support additional PPMs are encouraged to explore the \pkg{profdpm} source code, available via the Comprehensive R Archive Network (CRAN).

\section[Examples]{Examples} \label{Examples}
The following code example simulates a dataset consisting of three linear subgroups. The goal of this analysis is to recover the subgroup partition and perform profile inference on the slope parameter of each cluster. The following \proglang{R} snippet creates the simulated dataset.
<<>>=
#simulate data with 3 linear subgroups
x <- as.matrix(runif(99))
y <- c(0*x[1:33], 10*x[34:66], 20*x[67:99]) + rnorm(99)

#estimate linear partition
library(profdpm)
fit <- profLinear(y, x)
@

Next, the data are presented in a scatterplot. For each cluster identified by the estimated partition, the (profile) posterior mean slope is represented by a line with intercept zero. A $95\%$ credible interval for the slope is represented by two lines with slopes corresponding to the $0.025$ and $0.975$ quantiles of the (profile) posterior distribution over the slope parameter. These quantiles are computed using a parametric bootstrap

\begin{center}
<<fig=TRUE>>=
plot(x, y)
#plot mean line, bootstrap 95% credible lines
B <- 10000 #bootstrap size
attach(fit, warn.conflicts=FALSE)
for(i in 1:length(fit$m)) {
    abline(a=0,b=m[[i]],lty=2, col=i)
    tboot <- rgamma(B, a[[i]]/2, b[[i]]/2)
    mboot <- rnorm(B, m[[i]], 1/sqrt(s[[i]]*tboot))
    qboot <- quantile(mboot, probs=c(0.025, 0.975))
    abline(a=0,b=qboot[1], col=i)
    abline(a=0,b=qboot[2], col=i)
}
detach(fit)
@
\end{center}

%% Note: If there is markup in \(sub)section, then it has to be escape as above.

\bibliography{profdpm}
\end{document}
